{"version":3,"sources":["LogIn.js","Home.js","ProfessorInfo.js","App.js","serviceWorker.js","index.js"],"names":["LogIn","props","document","getElementById","addEventListener","event","keyCode","click","class","src","id","for","type","placeholder","onClick","this","handleAuth","React","Component","Home","Name","name","qt","Rate","rate","App","state","authenticated","userEmail","Authenticate","bind","x","value","email","fetch","method","body","JSON","stringify","headers","then","res","ok","json","data","setState","console","log","innerText","errMsg","LogInRoute","path","control","render","children","rest","to","Boolean","window","location","hostname","match","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.64a10cd6.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nclass LogIn extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n\n    componentDidMount() {\n        document.getElementById(\"email\").addEventListener(\"keyup\", function(event) {\n          if (event.keyCode === 13) {\n            document.getElementById(\"start\").click();\n          }\n        });\n      }\n\n    render() {\n      return (\n        <div class=\"App-header\">\n          <img class=\"App-logo\" src=\"logo192.png\"></img>\n          <p id=\"errMsg\"/>\n            <div class=\"input-group\">\n              <label class=\"input-label-g\" for=\"username\">Email</label>\n              <div class=\"input-btn-g\">\n                <input id=\"email\" type=\"email\" class=\"email-input\" placeholder=\"user@institution.edu\" />\n                <button class=\"btn btn-lg btn-start\" id=\"start\" onClick={this.props.handleAuth}>Start</button>\n              </div>\n            </div>\n        </div>\n      );\n    }\n  }\n\n  export default LogIn;\n\n","import React from 'react';\nimport './App.css';\n\nclass Home extends React.Component {\n    constructor(props) {\n      super(props);\n    }\n  \n    render() {\n      return (\n        <div class=\"App-header\">\n          <input id=\"search\" class=\"email-input\" placeholder=\"Please type something\" />\n        </div>\n      );\n    }\n  }\n \n  export default Home;","import React from 'react';\n\nfunction Name(props){\n\treturn (\n\t<div>\n\t\t<div id=\"nm\">\n\t\t\t<h1>{props.name}</h1>\n\t\t</div>\n\t\t<p id=\"dtbase\">Rating base on {props.qt} data collect from students.</p>\n\t\t<Rate rate={props.rate}/>\n\t</div>\t\n\t\t);\n}\n\nfunction Rate(props){\n\treturn (\n\t<div id=\"rt_area\">\n\t\t<div id=\"rt\">\n\t\t\t<div id=\"score\">\n\t\t\t\t<p>{props.rate}</p>\n\t\t\t</div>\n\t\t\t<div id=\"outof\">\n\t\t\t\t<p>/5</p>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t\t)\n}\n\nconst element = {name: \"Prof Somebody\",\n\t\t\t\trate:4.3,\n\t\t\t\tqt:2\n}\n\nfunction ProfessorInfo() {\n\treturn (\n\t\t<Name\n\t\t\t\tname = {element.name}\n\t\t\t\trate = {element.rate}\n\t\t\t\tqt = {element.qt}\n\t\t\t\t/>\n\t)\n}\n\nexport default Name;\n\n","\nimport React from 'react';\nimport './App.css';\nimport LogIn from './LogIn';\nimport Home from './Home';\nimport ProfessorInfo from './ProfessorInfo';\nimport { FaUserCircle } from 'react-icons/fa';\nimport {\n  BrowserRouter,\n  Switch,\n  Route,\n  Link,\n  useRouteMatch,\n  useLocation,\n\n  Redirect\n} from \"react-router-dom\";\n\nconst authInfo = {\n  authenticated: false,\n  setAuth(isAuthenticated) {\n    this.authenticated = isAuthenticated;\n  },\n  userEmail: 'none',\n  setEmail(email) {\n    this.userEmail = email;\n  }\n};\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { authenticated: false, userEmail: 'none' };\n    this.Authenticate = this.Authenticate.bind(this);\n  }\n\n  async Authenticate(event) {\n    // Dummy authentication.\n    var x = document.getElementById(\"email\").value;\n    var email = { email: x };\n\n    // fetch data from server.\n    const response = await fetch('http://localhost:5000/api/login', {\n      method: 'POST',\n      body: JSON.stringify(email),\n      headers: { 'Content-Type': 'application/json', \"Access-Control-Allow-Origin\": \"http://localhost:5000\" }\n    }).then(res => {\n      if (!res.ok) {\n        res.json().then(data => {\n          document.getElementById(\"errMsg\").innerText = data.errMsg;\n        });\n      } else {\n        res.json().then(data => {\n          this.setState({ authenticated: true, userEmail: data.email });\n          console.log(this.state.userEmail + \"in handling\");\n          console.log(this.state.authenticated);\n        });\n      }\n    });\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div class=\"App\">\n          <nav class=\"navbar\">\n              <div class=\"user-btn-box\">\n                <button class=\"btn user-btn\" ><FaUserCircle /></button>\n              </div>\n          </nav>\n          <hr />\n          <Switch>\n            <LogInRoute path=\"/login\" control={this.state.authenticated}>\n              <LogIn handleAuth={this.Authenticate} />\n            </LogInRoute>\n            <Route path=\"/home\" render={() => <Home userEmail={this.state.userEmail} />} />\n            <Route path=\"/professorinfo\" render={() => <ProfessorInfo/ >}/>\n            {/* {\n               this.state.authenticated ?\n                 <h1>sign out</h1> :\n                 <Route exact path=\"/login\" render={() => <LogIn handleAuth={this.Authenticate} />} />\n             } */}\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\n// This customized route redirects to home page once the user successfully logged in and stays at /login\n// if an error occurs and displays the error message.\nfunction LogInRoute({ control, children, ...rest }) {\n  console.log(control);\n  return (\n    <Route\n      {...rest}\n      render={\n        () => control ? (\n          <Redirect to=\"/home\" />\n        ) : (\n            children\n          )\n      }\n    />\n  );\n}\n\nclass Student extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {id: \"12345\"};\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}